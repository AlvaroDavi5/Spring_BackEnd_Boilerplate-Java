spring.application.name=Spring Back-End Boilerplate
spring.profiles.active=dev

# Configuring application datasource
spring.datasource.url=jdbc:postgresql://localhost:5432/db_postgres
spring.datasource.username=postgres
spring.datasource.password=pass
spring.datasource.driver-class-name=org.postgresql.Driver

# configuring jpa properties
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.type=trace
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.database.platform=org.hibernate.dialect.PostgreSQL9Dialect

# configuring ehcache path
spring.cache.jcache.config=classpath:cache/ehcache.xml

# excluding thymeleaf configurations
spring.thymeleaf.check-template-location=false

# configuring springmvc resources
spring.mvc.throw-exception-if-no-handler-found=true
spring.mvc.resources.add-mappings=false

# Configuring API pagination
# Maximum page size to be accepted
spring.data.web.pageable.max-page-size=100
# Page index parameter name
spring.data.web.pageable.page-parameter=page
# Page size parameter name
spring.data.web.pageable.size-parameter=size

# configuring jwt secret
jwt.secret=secret
jwt.expiration=3600

# configuring API version
release.version=5.0.0
api.version=2020-12-29
api.key="FX001-FREE"

# enable response compression
server.compression.enabled=true

# minimum response where compression will kick in
server.compression.min-response-size=2048

# mime types that should be compressed
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css

# configuring spring boot admin client
server.url=http://localhost
server.client.port=3000
server.admin.port=4000
server.port=${server.client.port}

spring.boot.admin.client.url=${server.url}:${server.admin.port}
spring.boot.admin.client.instance.serviceBaseUrl=${server.url}:${server.client.port}
spring.boot.admin.client.username=admin
spring.boot.admin.client.password=admin

# configuration to give secured server info
spring.boot.admin.client.instance.metadata.user.name=${spring.boot.admin.client.username}
spring.boot.admin.client.instance.metadata.user.password=${spring.boot.admin.client.password}

management.endpoints.web.base-path=/manage
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Logs
# OFF,FATAL,ERROR,WARN,INFO,DEBUG,TRACE,ALL
logging.level.root=OFF
logging.level.org.springframework.boot=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=INFO
logging.level.org.apache.kafka=WARN
#logging.level.*=OFF
#logging.pattern.level=OFF
logging.pattern.dateformat=%d{yyyy-MM-dd HH:mm:ss.SSS}
logging.exception-conversion-word=%replace(%wEx){'\n','\u2028'}%nopex

property.logsPath=./logs
logging.file.name=${property.logsPath}/internal.log
management.endpoint.logfile.external-file=${property.logsPath}/internal.log
logging.charset.file=UTF-8
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} | %level : [%t] [%l] | %msg%n

logging.charset.console=UTF-8
logging.pattern.console=%d{yyyy/MM/dd HH:mm:ss} | %highlight{%p}{FATAL=black bold, ERROR=red bold, WARN=yellow bold, INFO=green, DEBUG=cyan, TRACE=bright_magenta} %c{2}:%L - %m%n
